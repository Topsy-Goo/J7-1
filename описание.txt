

				Проект на Spring boot. Интернет-магазин.


Создан в рамках работы над курсовым проектом «Интерет-магазин» (Java 7).
ДЗ, сделанные на базе этого проекта:
• ДЗ-1, 2, 4, 7, 9.
• ДЗ-3 сделано в j6-7
• ДЗ-5 сделано в j7-5
• ДЗ-6 сделано в j7-5
• ДЗ-8 сделано в j7-8.rabbit
• ДЗ-10 сделано в j7-10
• ДЗ-11 сделано в j7-10

Домашнее задание 1:
1. Сделать на backend'е оформление заказа с сохранением его в БД
2. * Привязывать заказ к текущему пользователю

Домашнее задание 2:
1. * Попробовать реализовать корзины + редис (Задача довольно тяжелая)
2. Если с кодом тяжело, то хотя бы текстом опишите логику работы (общую идею)

Домашнее задание 3:
1. С помощью Spring AOP посчитайте по каждому сервису суммарное время, затрачиваемоена выполнение методов этих сервисов. И по endpoint'у /statistic выдайте полученную статистику клиенту.
Пример:
ProductService: 1200 ms
OrderService: 95 ms
UserService: 2000 ms

Домашнее задание 4:
1. Используя Spring-WS, реализовать Web Service для выгрузки списка товаров

Домашнее задание 5:
1. Запускаете Eureka Server
2. Делаете 2 микросервиса:
- Products Service - управлялка продуктами (репо + сервис + контр). У сервиса server.port = 0
- Фронт сервис на AngularJS, который умеет отобржать продукты на html странице

Домашнее задание 6:
Повторить прошлое задание, перейдя на актуальную версию spring-cloud, с добавлением gateway, фронт должен напрямую через gateway получать продукты.

Домашнее задание 7:
1. Создать тесты под нашу версию магазина

Домашнее задание 8:
	1. Сделайте два консольных приложения (не Спринг):
	  а. IT-блог, который публикует статьи по языкам программирования
	  б. Подписчик, которого интересуют статьи по определенным языкам

	  Детали a. Если IT-блог в консоли пишет 'php some message', то 'some message' отправляется в RabbitMQ с темой 'php', и это сообщение получают подписчики этой темы

	  Детали b. Подписчик при запуске должен ввести команду 'set_topic php', после чего начнет получать сообщения из очереди с соответствующей темой 'php'

	2. * Сделайте возможность клиентов подписываться и отписываться от статей по темам в процессе работы приложения-подписчика

Домашнее задание 9:
1. Сделать Карточку товара. Гости могут просматривать её и отзывы в ней.
2. Сделать возможность авторизованному юзеру оставить один отзыв к каждому купленному товару. (Сделать сложный запрос в БД, а не вытягивать все заказы юзера.)

Домашнее задание 10:
1. Разобраться с проектом
2. * Отделите микросервис заказов

Домашнее задание 11:
1. Замените интеграцию core с корзиной с RestTemplate на WebClient
2. * Подумайте как реализовать защиту endpoint'ов
3. * Попробуйте разобраться с CORS Policy для Auth Server


http://localhost:12440/market/h2-console
SELECT * FROM CATEGORIES;
SELECT * FROM ORDERITEMS;
SELECT * FROM ORDERS;
SELECT * FROM ORDERSTATES;
SELECT * FROM OURUSERS;
SELECT * FROM ROLES;
SELECT * FROM OURUSERS_ROLES;
SELECT * FROM OURPERMISSIONS;
SELECT * FROM OURUSERS_OURPERMISSIONS;
SELECT * FROM PRODUCTS;
SELECT * FROM DELIVERY_TYPES;
SELECT * FROM PRODUCTREVIEWS;

memurai-cli --scan
memurai-cli flushall

Текст для следующего коммита:
• убрали вызов OrderItemRepo.userOrderItemsByProductId из ProductReviewService (теперь этот вызов идёт через OrderService);
• мелкие доработки.
• Сделали ProductReviewController
• удалили лишние инъекции.

//TODO: разобраться с удалением корзины из кэша.
//TODO: не показывать на витрине товар с нулевым количеством (в режиме редактирования показывать и нулевой товар).
//TODO: выбирать категорию из списка на стр.редактирования товара
//TODO: тесты поправить (опять посыпались).
//TODO: добавить на стр.товара кнопку Положить в корзину.
