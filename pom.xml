<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
			   					   https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>ru.gb.antonov</groupId>
	<artifactId>j7-1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>internet-shop</name>
	<description>internet-shop powered by Spring Boot</description>

	<properties>
		<java.version>11</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-maven-plugin</artifactId>
			<version>2.5.5</version>
		</dependency> <!-- spring-boot-maven-plugin 2.5.5 -->
		<dependency> <!-- Позволяет упростить работу с хибер-том на уровне Спринга. См.также YAML-файл. -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency> <!-- spring-boot-starter-data-jpa -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency> <!-- spring-boot-starter-web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
			<exclusions>
				<exclusion>	<!-- Нам не нужна совместимость с junit4. -->
					<groupId>org.junit.vintage</groupId>
					<artifactId>junit-vintage-engine</artifactId>
				</exclusion>
			</exclusions>
		</dependency> <!-- spring-boot-starter-test -->
		<dependency>	<!-- для организации авторизации при пом.(чего?) -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
			<!-- Также автоматически конфигурирет умолчального пользователя user; его (одноразовый?) пароль создаётся генериться при старте приложения.  -->
		</dependency> <!-- spring-boot-starter-security -->
<!--		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>--> <!-- spring-boot-starter-validation -->
<!--		<dependency>	для @PostConstruct и @PreDestroy.
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<version>1.0</version>
		</dependency> --> <!-- jsr250-api 1.0 -->
		<dependency>	<!-- для тестирования безопасности -->
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
		</dependency> <!-- spring-security-test -->
		<dependency>	<!-- для организации автоматических проверок параметров методов -->
			<groupId>org.hibernate.validator</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>6.1.5.Final</version>
		</dependency> <!-- hibernate-validator 6.1.5.Final -->
		<dependency>	<!-- поддержка jdbc-драйвера H2 ("H2 Database Engine"). См.также YAML-файл. -->
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency> <!-- h2 -->
		<dependency>	<!-- Библиотека для генерации кода: геттеры, сеттеры, конструкторы и др. -->
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency> <!-- lombok -->
		<dependency>	<!-- Помогает собирать и парсить JWT. -->
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency> <!-- jjwt 0.9.1 -->
		<dependency>	<!-- Система миграции. В ресурсах нужна папка db\migration (не db.migration). -->
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency> <!-- flyway-core -->
		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
			<version>22.0.0</version><!-- LATEST or RELEASE are being deprecated -->
			<scope>compile</scope>
		</dependency> <!-- jetbrains annotations 22.0.0 -->

	<!-- Для использования следующих двух зависимостей требуется установка Redis'а (в Linux) или
		 Memurai (в Windows). -->
		<dependency>	<!-- Аналог Spring data под кэшь Radis'а. -->
			<groupId>org.springframework.data</groupId>
			<artifactId>spring-data-redis</artifactId>
		</dependency> <!-- spring-data-redis -->
		<dependency>	<!-- Библиотека для установления соединения с Redis. -->
			<groupId>redis.clients</groupId>
			<artifactId>jedis</artifactId>
			<version>3.6.0</version>
		</dependency> <!-- jedis -->

<!-- Следующие 5 зависимостей нужны для SOAP. -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web-services</artifactId>
		</dependency> <!-- spring-boot-starter-web-services -->
		<dependency>	<!-- Без этого jaxb2-плагин не устанавливался. -->
			<!-- https://mvnrepository.com/artifact/org.codehaus.mojo/jaxb2-maven-plugin -->
			<groupId>org.codehaus.mojo</groupId>
			<artifactId>jaxb2-maven-plugin</artifactId>
			<version>2.5.0</version>
		</dependency> <!-- jaxb2-maven-plugin 2.5.0 -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.3.1</version>
		</dependency> <!-- jaxb-api 2.3.1 -->
		<dependency>
			<groupId>org.glassfish.jaxb</groupId>
			<artifactId>jaxb-runtime</artifactId>
			<version>2.3.1</version>
		</dependency> <!-- jaxb-runtime 2.3.1 -->
		<dependency>
			<groupId>wsdl4j</groupId>
			<artifactId>wsdl4j</artifactId>
			<version>1.6.2</version>
		</dependency> <!-- wsdl4j 1.6.2 -->
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<excludes>
						<exclude>
							<groupId>org.projectlombok</groupId>
							<artifactId>lombok</artifactId>
						</exclude>
					</excludes>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>jaxb2-maven-plugin</artifactId>
				<version>2.5.0</version>
				<executions>
					<execution>
						<id>xjc</id>
						<goals>
							<goal>xjc</goal>
							<!-- генератор классов из XSD-схем. Если тупая сука не запускается, ссылаясь на то, что XSD-файл не был изменён с момента последнего запуска задачи, то нужно изменить XSD-файл, сохранить его, отменить изменение и снова сохранить. Наверное, говно-авторы этого маразма так и хотели, — чтобы юзер корячился из-за каждой мелочи. -->
						</goals>
					</execution>
				</executions>
				<configuration>

					<sources>
						<source>${project.basedir}/src/main/resources/xsd/product.xsd</source><!--  -->
					</sources>
<!-- packageName	- пакет, который будет указан во всех сгенерированных java-файлах. Софтина также создаст такой пакет в папке <outputDirectory>. Этот параметр можно указывать, можно не указывать, — в любом случае результат вас не порадует.
	 outputDirectory	- папка, в которой будет создан пакет <packageName>. Эту же папку софтина почистит, если вы забыли указать false в <clearOutputDir>. (Какому дебилу пришла в голову идея, что какую-то папку проекта по умолчанию нужно очищать?!! ) -->
					<packageName>temp</packageName>
					<outputDirectory>${project.basedir}/src/main/java/ru/gb/antonov/j71/beans/soap</outputDirectory>
					<clearOutputDir>false</clearOutputDir>

				</configuration>
			</plugin>

		</plugins>
	</build>

</project>
<!--  :  :  -->
